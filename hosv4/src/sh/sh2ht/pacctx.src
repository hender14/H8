; --------------------------------------------------------------------------- 
;  HOS-V4                                                                     
;    プロセッサ抽象化コンポーネント (日立 SH2用)                              
;                                                                             
;                                     Copyright (C) 1998-2002 by Project HOS  
;                                     http://sourceforge.jp/projects/hos/     
; --------------------------------------------------------------------------- 



				.CPU	SH2


				.EXPORT	_hospac_dis_int			; 割り込み禁止
				.EXPORT	_hospac_ena_int			; 割り込み許可
				.EXPORT	_hospac_cre_ctx_asm		; 実行コンテキストの作成
				.EXPORT	_hospac_swi_ctx			; 実行コンテキストの切替
				.IMPORT	_hospac_sh_imsk			; 割り込みマスクの値


;------------------------------------------------
; 割り込み禁止
; void hospac_dis_int(void)
;------------------------------------------------
				.SECTION  P, CODE, ALIGN=4
_hospac_dis_int:
				stc		sr, r0
				or		#h'f0, r0		; 全割り込みマスク
				rts
				ldc		r0, sr



;------------------------------------------------
; 割り込み許可
; void hospac_ena_int(void)
;------------------------------------------------
				.SECTION  P, CODE, ALIGN=4
_hospac_ena_int:
				mov		#h'f0, r1		; 0x00f0 を反転させて 0xff0f を作成
				not		r1, r1
				stc		sr, r0
				and		r1, r0			; 割り込みマスク値以外を取得
				mov.l	L_imsk, r1
				mov.l	@r1, r1
				or		r1, r0			; 割り込みマスクの値を設定
				rts
				ldc		r0, sr

				.ALIGN	4
L_imsk			.DATA.L	_hospac_sh_imsk	; 割り込みマスク



;------------------------------------------------
;  実行コンテキストの作成
;  void hospac_cre_ctx_asm(
;		 T_HOSPAC_CTXINF *pk_ctxinf,	作成するコンテキスト
;		 VP 	sp, 					スタックポインタ
;		 void	(*task)(VP_INT),		実行アドレス
;		 VP_INT exinf)					実行時パラメータ
;------------------------------------------------
				.SECTION  P, CODE, ALIGN=4
_hospac_cre_ctx_asm:
				add 	#-20, r5		; r8-r12用領域分空ける
				mov.l	r7, @-r5		; 実行時をパラメーターを r13 の領域に設定
				mov.l	r6, @-r5		; 実行開始アドレスを r14 の領域に設定
				mov.l	#ctx_entry, r0	; 実行エントリポイントをリターンアドレスに設定
				mov.l	r0, @-r5
				rts
				mov.l	r5, @(0, r4) 	; スタックポインタを保存

;------------------------------------------------
; 実行コンテキストエントリーアドレス
;------------------------------------------------
ctx_entry:	 	
				jmp		@r14			; 実行開始アドレスに分岐
				mov		r13, r4			; 実行時パラメータを設定



;------------------------------------------------
; 実行コンテキストの切替
; void hospac_swi_ctx(
;		T_HOSPAC_CTXINF *pk_pre_ctxinf,	現在のコンテキストの保存先
;		T_HOSPAC_CTXINF *pk_nxt_ctxinf)	切り替えるコンテキスト
;------------------------------------------------
				.SECTION  P, CODE, ALIGN=4
_hospac_swi_ctx:
				mov.l	 r8, @-r15		; r8-r14,prを退避
				mov.l	 r9, @-r15
				mov.l	 r10, @-r15
				mov.l	 r11, @-r15
				mov.l	 r12, @-r15
				mov.l	 r13, @-r15
				mov.l	 r14, @-r15
				sts.l	 pr, @-r15

				mov.l	 r15, @(0, r4)	; スタックポインタ保存
				mov.l	 @(0, r5), r15	; スタックポインタ復帰

				lds.l	 @r15+, pr		; r8-r14,prを復帰
				mov.l	 @r15+, r14
				mov.l	 @r15+, r13
				mov.l	 @r15+, r12
				mov.l	 @r15+, r11
				mov.l	 @r15+, r10
				mov.l	 @r15+, r9
				rts
				mov.l	 @r15+, r8


				.END



; --------------------------------------------------------------------------- 
;  Copyright (C) 1998-2002 by Project HOS                                     
; --------------------------------------------------------------------------- 
