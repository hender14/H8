; --------------------------------------------------------------------------- 
;  Hyper Operating System V4  μITRON4.0仕様 Real-Time OS                     
;    プロセッサ抽象化コンポーネント (日立 H8/300HN用)                         
;    コンテキスト制御                                                         
;                                                                             
;                                     Copyright (C) 1998-2002 by Project HOS  
;                                     http://sourceforge.jp/projects/hos/     
; --------------------------------------------------------------------------- 


		.CPU     300HN


		.EXPORT	_hospac_dis_int		; 割り込み禁止
		.EXPORT	_hospac_ena_int		; 割り込み許可
		.EXPORT	_hospac_cre_ctx_asm	; 実行コンテキストの作成
		.EXPORT	_hospac_swi_ctx		; 実行コンテキストの切替
		.IMPORT	_kernel_h83_imsk	; 割り込みマスク


		.SECTION  P, CODE, ALIGN=2

; -----------------------------------------------
;  割り込み禁止
;  void hospac_dis_int(void)
; -----------------------------------------------
_hospac_dis_int:
		orc	#h'c0, ccr	; 割り込みの禁止
		rts


; -----------------------------------------------
;  割り込み許可
;  void hospac_ena_int(void)
; -----------------------------------------------
_hospac_ena_int:
		mov.b	@_kernel_h83_imsk, r0l
		ldc.b	r0l, ccr	; 割り込みの許可
		rts


; -----------------------------------------------
;  実行コンテキストエントリーアドレス
; -----------------------------------------------
ctx_entry:	
		mov.l	er2, er0	; 実行時パラメータを第一引数に設定
		jmp	@er3		; 実行アドレスにジャンプ


; -----------------------------------------------
;  実行コンテキストの作成
;  void hospac_cre_ctx_asm(
;	T_HOSPAC_CTXINF *pk_ctxinf,	/* 作成するコンテキスト */
;	void            (*task)(VP_INT),/* 実行アドレス */
;	VP              sp,		/* スタックポインタ */
;	VP_INT          exinf		/* 実行時パラメータ */
;	)
; -----------------------------------------------
_hospac_cre_ctx_asm:
		push.l	er2
		mov.w	#ctx_entry, r2	; 実行エントリーポイントの設定
		mov.w	r2, @-er1
		mov.l	@(6, er7), er2	; 実行時パラメータの取り出し
		mov.l	er2, @-er1	; 実行時パラメータ格納 (er2の退避分)
		mov.w	e0, @-er1
					; 実行ドレスを格納 (er3 の退避分)
		sub.w	#14, r1		; er4〜er6 までの退避分
		mov.w	r1, @(0, er0)	; スタックポインタの格納
		pop.l	er2
		rts


; -----------------------------------------------
;  実行コンテキストの切替
;  void hospac_swi_ctx(
;	T_HOSPAC_CTXINF *pk_pre_ctxinf,	/* 現在のコンテキストの保存先 */
;	T_HOSPAC_CTXINF *pk_nxt_ctxinf	/* 切り替えるコンテキスト */
;	)
; -----------------------------------------------
_hospac_swi_ctx:
		push.l	er2
		push.l	er3
		push.l	er4
		push.l	er5
		push.l	er6
		mov.w   r7,@(0, er0)   ; スタックポインタ保存
		mov.w   e0,r0
		mov.w   @(0, er0), r7  ; スタックポインタ復帰
		pop.l	er6
		pop.l	er5
		pop.l	er4
		pop.l	er3
		pop.l	er2
		rts


		.END



; --------------------------------------------------------------------------- 
;  Copyright (C) 1998-2003 by Project HOS                                     
; --------------------------------------------------------------------------- 
